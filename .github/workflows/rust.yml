on: [push]

name: Build Release Artifacts

jobs:
  x64_build:
    name: Build x64 Rust Binaries
    runs-on: ubuntu-18.04
    if: startsWith(github.ref, 'refs/tags/')
    env:
      SQLX_OFFLINE: "true"
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
      - name: Install Dependencies
        run: >
          sudo apt-get install
          lld
          libbsd-dev
          protobuf-compiler
          zip
          unzip
      - name: Build X64 Release
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      # X86 Debug/Release folder structure
      - name: Create artifact folder structure
        run: |
          # Copy services
          cp -r ./services artifact-working-dir/services
          # Copy binaries
          mkdir -p artifact-working-dir/bin
          mv ./target/*/teg-* ./artifact-working-dir/bin
          mv ./target/armv7-unknown-linux-gnueabihf/*/teg-* ./artifact-working-dir/bin
          rm ./artifact-working-dir/bin/*.d
      # # Upload the Debug Artifact
      # - name: Archive Debug Artifacts
      #   if: "!startsWith(github.ref, 'refs/tags/')"
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: teg-x86_64
      #     path: ./artifact-working-dir
      # Upload the Release Artifact
      - name: Zip Release Binaries
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          zip -r teg-x86_64.zip ./artifact-working-dir
      - name: Upload X86 Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: ./teg-x86_64.zip

  arm_v7_build:
    name: Build ARMv7 Rust Binaries
    runs-on: ubuntu-18.04
    env:
      SQLX_OFFLINE: "true"
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: beta
          target: armv7-unknown-linux-gnueabihf
      - name: Install multiarch support
        run: |
          sudo sed -i 's/deb http/deb [arch=i386,amd64] http/g' /etc/apt/sources.list
          echo "deb [arch=armhf] http://bg.ports.ubuntu.com/ bionic main restricted" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=armhf] http://bg.ports.ubuntu.com/ bionic-updates main restricted" | sudo tee -a /etc/apt/sources.list

          sudo dpkg --add-architecture armhf
          sudo apt-get update
          sudo apt --fix-broken install
          sudo apt-get install gcc-multilib g++-multilib
      - name: Install Dependencies
        run: >
          sudo apt-get install
          gcc-arm-linux-gnueabihf
          g++-arm-linux-gnueabihf
          g++-multilib-arm-linux-gnueabihf
          gcc-multilib-arm-linux-gnueabihf
          lld
          libbsd-dev
          libbsd-dev:armhf
          protobuf-compiler
          zip
          unzip
          build-essential
          cmake
          pkg-config
          libssl-dev
          clang
      # - name: Check install
      #   run: dpkg -S arm-linux-gnueabihf-gcc

      # Armv7 Debug Builds
      - name: Build ARMv7 (Debug)
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target=armv7-unknown-linux-gnueabihf

      # Armv7 Release Builds
      - name: Build ARMv7 (Release)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target=armv7-unknown-linux-gnueabihf

      # Armv7 Debug/Release folder structure
      - name: Create artifact folder structure
        run: |
          # Copy services
          mkdir artifact-working-dir
          cp -r ./services artifact-working-dir/services
          # Copy binaries
          mkdir -p artifact-working-dir/bin
          mv ./target/*/teg-* ./artifact-working-dir/bin
          mv ./target/armv7-unknown-linux-gnueabihf/*/teg-* ./artifact-working-dir/bin
          rm ./artifact-working-dir/bin/*.d
      # Upload the Debug Artifact
      - name: Archive Debug Artifacts
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: actions/upload-artifact@v2
        with:
          name: teg-arm
          path: ./artifact-working-dir
      # Upload the Release Artifact
      - name: Zip Release Binaries
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          zip -r teg-arm.zip ./artifact-working-dir
      - name: Upload ARMv7 Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: ./teg-arm.zip
